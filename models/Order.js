const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
    order_id:{
        type:String
    },
    state:{
        type:String
    },
    provider:{
        provider_id:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Provider'
        },
        locations:[{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Location'
        }]
    },
    items:[{
        items:{
            id:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Item'
            },
            category_id:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Category'
            },
            quantity:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'ItemQuantity'
            }
        }
    }],
    add_ons:[{
        type:mongoose.Schema.Types.ObjectId,
        ref:'AddOn'
    }],
    offers:[{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Offer'
    }],
    documents:[{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Document'
    }],
    billing:{
        type:mongoose.Schema.Types.ObjectId,
        ref:"Billing"
    },
    fulfillments:[{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Fulfillments'
    }],
    quote:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Quotation'
    },
    payment:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Payment'
    },
    created_by:{
        type:String
    },
    cancellation:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Cancellation'
    },
    linked_order:{
        items:[{
            category_id:{
                type:String
            },
            descriptor:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Descriptor'
            },
            quantity:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'ItemQuantity'
            },
            price:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Price'
            }
        }],
        provider:{
            provider_id:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Provider'
            },
            descriptor:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Descriptor'
            },
            address:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Address'
            }
        },
        order:{
            order_id:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Order'
            },
            weight:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Scalar'
            },
            dimensions:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Dimensions'
            },
            declared_value:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Price'
            },
            taxable_value:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'Price'
            },
            hsn_code:{
                type:String
            },
            sgst_amount:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'DecimalValue'
            },
            cgst_amount:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'DecimalValue'
            },
            igst_amount:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'DecimalValue'
            }
        }
    }
},{
    timestamps:true
});

module.exports = mongoose.model('Order',orderSchema);