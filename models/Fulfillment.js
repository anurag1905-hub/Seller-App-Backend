const mongoose = require('mongoose');

const fulfillmentSchema = new mongoose.Schema({
    fulfillment_id:{
        type:String
    },
    type:{
        type:String
    },
    awb_no:{
        type:String
    },
    ewaybillno:{
        type:String
    },
    ebnexpirydate:{
        type:String
    },
    provider_id:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Provider'
    },
    rating:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Rating'
    },
    state:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'State'
    },
    tracking:{
        type:Boolean
    },
    customer:{
        person:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Person'
        },
        contact:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Contact'
        }
    },
    agent:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Agent'
    },
    person:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Person'
    },
    contact:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Contact'
    },
    vehicle:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Vehicle'
    },
    start:{
        location:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Location'
        },
        time:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Time'
        },
        instructions:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Descriptor'
        },
        contact:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Contact'
        },
        person:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Person'
        },
        authorization:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Authorization'
        }
    },
    end:{
        location:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Location'
        },
        time:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Time'
        },
        instructions:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Descriptor'
        },
        contact:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Contact'
        },
        person:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Person'
        },
        authorization:{
            type:mongoose.Schema.Types.ObjectId,
            ref:'Authorization'
        }
    },
    rateable:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Rateable'
    },
    tags:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Tags'
    }
},{
    timestamps:true
});

module.exports = mongoose.model('Fulfillment',fulfillmentSchema);